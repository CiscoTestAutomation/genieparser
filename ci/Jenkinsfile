def project = 'genieparser'

pipeline {
    agent {
        label 'linux'
    }
    options {
        timeout(time: 30, unit: 'MINUTES')
    }
    stages {
        stage('Clone repos') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/dev']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'genie']], userRemoteConfigs: [[credentialsId: 'e8a7354a-c71a-42cb-83ee-49ab5ad40085', url: 'https://wwwin-github.cisco.com/pyATS/genie.git']]])
                checkout([$class: 'GitSCM', branches: [[name: '*/dev']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'genielibs']], userRemoteConfigs: [[credentialsId: 'e8a7354a-c71a-42cb-83ee-49ab5ad40085', url: 'https://wwwin-github.cisco.com/pyATS/genielibs.git']]])
                checkout([$class: 'GitSCM', branches: [[name: '*/dev']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'genielibs.cisco']], userRemoteConfigs: [[credentialsId: 'e8a7354a-c71a-42cb-83ee-49ab5ad40085', url: 'https://wwwin-github.cisco.com/pyATS/genielibs.cisco.git']]])
                checkout([$class: 'GitSCM', branches: [[name: '*/dev']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'unicon']], userRemoteConfigs: [[credentialsId: 'e8a7354a-c71a-42cb-83ee-49ab5ad40085', url: 'https://wwwin-github.cisco.com/pyATS/unicon.git']]])
                checkout([$class: 'GitSCM', branches: [[name: '*/dev']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'unicon.plugins']], userRemoteConfigs: [[credentialsId: 'e8a7354a-c71a-42cb-83ee-49ab5ad40085', url: 'https://wwwin-github.cisco.com/pyATS/unicon.plugins.git']]])
                checkout([$class: 'GitSCM', branches: [[name: '*/dev']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'pyats']], userRemoteConfigs: [[credentialsId: 'e8a7354a-c71a-42cb-83ee-49ab5ad40085', url: 'https://wwwin-github.cisco.com/pyATS/pyats.git']]])
                checkout([$class: 'GitSCM', branches: [[name: '*/dev']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'genietelemetry']], userRemoteConfigs: [[credentialsId: 'e8a7354a-c71a-42cb-83ee-49ab5ad40085', url: 'https://wwwin-github.cisco.com/pyATS/genietelemetry.git']]])
                checkout([$class: 'GitSCM', branches: [[name: '*/dev']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'genietrafficgen']], userRemoteConfigs: [[credentialsId: 'e8a7354a-c71a-42cb-83ee-49ab5ad40085', url: 'https://wwwin-github.cisco.com/pyATS/genietrafficgen.git']]])
                checkout([$class: 'GitSCM', branches: [[name: '*/master']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'pyats.contrib']], userRemoteConfigs: [[url: 'https://github.com/CiscoTestAutomation/pyats.contrib.git']]])
                script {
                    sh """
                    ls -l
                    cd genie
                    git remote -v
                    cd ../genielibs
                    git remote -v
                    cd ../genielibs.cisco
                    git remote -v
                    cd ../unicon
                    git remote -v
                    cd ../unicon.plugins
                    git remote -v
                    cd ../pyats
                    git remote -v
                    cd ../genietelemetry
                    git remote -v
                    cd ../genietrafficgen
                    git remote -v
                    cd ../pyats.contrib
                    git remote -v
                    """
                }
            }
        }

        stage('Checkout branches') {
            steps {
                script {
                    sh """
                    uname -n
                    cd genie
                    # checkout same branch on genie, if it exists
                    git checkout ${env.CHANGE_BRANCH == null ? env.GIT_BRANCH : env.CHANGE_BRANCH} || true
                    # checkout same branch on genielibs, if it exists
                    cd ../genielibs
                    git checkout ${env.CHANGE_BRANCH == null ? env.GIT_BRANCH : env.CHANGE_BRANCH} || true
                    cd ../genielibs.cisco
                    git checkout ${env.CHANGE_BRANCH == null ? env.GIT_BRANCH : env.CHANGE_BRANCH} || true
                    cd ../unicon
                    git checkout ${env.CHANGE_BRANCH == null ? env.GIT_BRANCH : env.CHANGE_BRANCH} || true
                    cd ../unicon.plugins
                    git checkout ${env.CHANGE_BRANCH == null ? env.GIT_BRANCH : env.CHANGE_BRANCH} || true
                    cd ../pyats
                    git checkout ${env.CHANGE_BRANCH == null ? env.GIT_BRANCH : env.CHANGE_BRANCH} || true
                    cd ../genietelemetry
                    git checkout ${env.CHANGE_BRANCH == null ? env.GIT_BRANCH : env.CHANGE_BRANCH} || true
                    cd ../genietrafficgen
                    git checkout ${env.CHANGE_BRANCH == null ? env.GIT_BRANCH : env.CHANGE_BRANCH} || true
                    cd ../pyats.contrib
                    git checkout ${env.CHANGE_BRANCH == null ? env.GIT_BRANCH : env.CHANGE_BRANCH} || true
                    """
                }
            }
        }

        stage("Build pyATS and make develop") {
            steps {
                sh """
                    env
                    pip list
                    pip freeze
                    export PIP_DOWNLOAD_CACHE=/scratch/pip_download_cache
                    export LC_ALL=C.UTF-8
                    rm -rf /scratch/genieparser-env
                    cd /scratch
                    /scratch/pyadm/.pyenv/versions/3.8.8/bin/python -m venv genieparser-env
                    . /scratch/genieparser-env/bin/activate
                    pip install --upgrade pip setuptools
                    pip3 install --no-cache-dir wheel pytest pytest-xdist coverage
                    pip3 install --no-cache-dir -i http://pyats-pypi.cisco.com/simple --trusted-host pyats-pypi.cisco.com cisco-distutils ats[full]
                    cd $WORKSPACE/genie
                    make develop
                    cd $WORKSPACE/genielibs
                    make develop
                    cd $WORKSPACE/genielibs.cisco
                    make develop
                    git status
                    cd $WORKSPACE/unicon
                    make develop
                    cd $WORKSPACE/unicon.plugins
                    make develop
                    cd $WORKSPACE/pyats
                    make develop
                    cd $WORKSPACE/genietelemetry
                    make develop
                    cd $WORKSPACE/genietrafficgen
                    make develop
                    cd $WORKSPACE/pyats.contrib
                    make develop
                    cd $WORKSPACE
                    make develop


                    git diff --exit-code ./sdk_generator/outputs/github_parser.json || \
                    (echo "Parser JSON may be corrupted. Ensure your branch is up to date, run 'make json', and re-push to branch" && false)

                    cd $WORKSPACE/genielibs
                    make json
                    cd $WORKSPACE/genie
                    make json
                    cd $WORKSPACE
                    make json

                    env
                    pip list
                    pip freeze
                    git status
                """
            }
        }

        stage("Run compileAll") {
            steps {
                sh """
                . /scratch/genieparser-env/bin/activate
                compileAll --path src
                """
            }
        }

        stage("Test changelogs") {
            steps {
                sh"""
                . /scratch/genieparser-env/bin/activate
                make changelogs
                """
            }
        }

        stage("Run folder_parsing_job") {
            steps {
                sh """
                . /scratch/genieparser-env/bin/activate
                cd tests
                python folder_parsing_job.py
                """
            }
        }

        stage("Run folder_parsing_job (coverage)") {
            steps {
                sh """
                . /scratch/genieparser-env/bin/activate
                cd tests
                coverage run --include '*/parser/*' --omit '*/tests/*' folder_parsing_job.py -f --no-mail --no-archive
                coverage report
                coverage html
                """
                publishHTML (target: [
                    allowMissing: true,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: 'tests/htmlcov',
                    reportFiles: "index.html",
                    reportName: 'Coverage report'
                ])
            }
        }


        stage("Run runAll") {
            steps {
                sh """
                . /scratch/genieparser-env/bin/activate
                runAll --path tests --no-refresh --coverage
                """
            }
        }

        stage("Genie runAll") {
            steps {
                sh """
                . /scratch/genieparser-env/bin/activate
                cd genie/tests
                runAll --no-refresh --coverage
                """
            }
        }

        stage("Ops runAll") {
            steps {
                sh """
                . /scratch/genieparser-env/bin/activate
                cd genielibs/tests
                runAll --path ops --no-refresh
                """
            }
        }
    }
    post {
        cleanup {
            cleanWs()
        }
    }
}
